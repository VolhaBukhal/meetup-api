openapi: 3.0.3
info:
  title: Swagger Meetups - OpenAPI 3.0
  description: |-
    This is a sample Meetups api for main crud operations and the ability of sorting, filtering and searching of the meetups. 
  termsOfService: http://swagger.io/terms/
  contact:
    email: o.bukhal@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:5000
tags:
  - name: Meetups
    description: Everything about your meetings
paths:
  /meetups:
    get:
      tags:
        - meetups
      operationId: getAllMeetups  
      summary: Finds meetups by name, description or place of location
      description: Sorting, filtering, searching are available
      parameters:
        - name: sort_by
          in: query
          description: sorting in descending or ascending order
          example: sort_by=-title
          schema:
            type: string
        - name: search
          in: query
          description: search by word example
          example: search=-title
          schema:
            type: string
        - name: limit
          in: query
          description: max number of meetups to return
          example: limit=5
          schema:
            type: integer
            format: int32
        - name: tags
          in: query
          description: Tags to filter
          example: title=html&place=dresden
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meetup'          
        'default':
          description: Internal Server Error
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/Error'
    post: 
      tags:
        - meetups
      operationId: createMeetup  
      summary: Create meetup
      requestBody:
        content:
          application/json:
            schema:
              example: {
                title: "Code review",
                description: "need to get acquaintance",
                time: "2022-09-09T21:00:00.000Z",
                place: "Dresden Hall"
              }
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meetup'          
        'default':
          description: Internal Server Error
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/Error'        
  /meetups/{meetupId}:   
    get:
      tags:
        - meetups
      operationId: getMeetUpById
      parameters: 
        - name: meetupId
          in: path
          required: true
          description: meetup identificator
          schema:
            type: string
      summary: Get single meetup by id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meetup'          
        'default':
          description: Internal Server Error
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - meetups
      operationId: updateMeetup
      summary: Update single meetup
      parameters: 
        - name: meetupId
          in: path
          required: true
          description: meetup identificator
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: {
                title: "Code review update",
              }      
      responses:
        '204':
          description: no content
        'default':
          description: Internal Server Error
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - meetups
      operationId: deleteMeetup
      summary: Delete single meetup
      parameters: 
        - name: meetupId
          in: path
          required: true
          description: meetup identificator
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Meetup with the id 7f224e92-8a82-4318-ad18-0b0f68f404a0 deleted from database
        '404':
          description: not found 
          content:
            text/plain:
              schema:
                type: string
                example: Meetup with the id 7f224e92-8a82-4318-ad18-0b0f68f404a0 doesn't exist in database
        'default':
          description: Internal Server Error
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/Error'        
components:
  schemas:
    Tag:
      type: string
      example: backend, dbms
      xml:
        name: tag
    Meetup:
      required:
        - title
        - description
        - time
        - place
      type: object
      properties:
        id_meetup:
          type: string
          example: a197dd44-1537-4349-9f41-1c8d58dccbc1
        title:
          type: string
          example: SQL discussion
        description:
          type: string
          example: need to get acquaintance 
        time: 
          type: string
          format: date
          example: 2022-09-09T21:00:00.000Z
        place: 
          type: string
          example: Victory Hall
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
    Error:
      type: object
      required:
       - code
       - message
      properties:
        code:
          type: integer
          example: 500
        message:
         type: string
         example: error
       
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
